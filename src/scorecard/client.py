# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .environment import ScorecardEnvironment
from .errors.unprocessable_entity_error import UnprocessableEntityError
from .resources.run.client import AsyncRunClient, RunClient
from .resources.testrecord.client import AsyncTestrecordClient, TestrecordClient
from .resources.testset.client import AsyncTestsetClient, TestsetClient
from .types.http_validation_error import HttpValidationError
from .types.model_params import ModelParams

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Scorecard:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: ScorecardEnvironment = ScorecardEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.testset = TestsetClient(client_wrapper=self._client_wrapper)
        self.run = RunClient(client_wrapper=self._client_wrapper)
        self.testrecord = TestrecordClient(client_wrapper=self._client_wrapper)

    def start_execution(
        self,
        *,
        scoring_model_name: str,
        run_id: int,
        testset_id: int,
        api_token: str,
        model_under_test: ModelParams,
        prompt_template: str,
        instant_scoring: typing.Optional[bool] = OMIT,
    ) -> typing.Any:
        """
        Starts a new model execution.

        Parameters:
            - scoring_model_name: str.

            - run_id: int.

            - testset_id: int.

            - api_token: str.

            - model_under_test: ModelParams.

            - prompt_template: str.

            - instant_scoring: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "scoring_model_name": scoring_model_name,
            "run_id": run_id,
            "testset_id": testset_id,
            "api_token": api_token,
            "model_under_test": model_under_test,
            "prompt_template": prompt_template,
        }
        if instant_scoring is not OMIT:
            _request["instant_scoring"] = instant_scoring
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "start-execution"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def score(
        self,
        *,
        scoring_model_name: str,
        run_id: int,
        testset_id: int,
        token: str,
        use_global_scoring_config: typing.Optional[bool] = OMIT,
    ) -> typing.Any:
        """
        Score existing testrecords.

        Parameters:
            - scoring_model_name: str.

            - run_id: int.

            - testset_id: int.

            - token: str.

            - use_global_scoring_config: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "scoring_model_name": scoring_model_name,
            "run_id": run_id,
            "testset_id": testset_id,
            "token": token,
        }
        if use_global_scoring_config is not OMIT:
            _request["use_global_scoring_config"] = use_global_scoring_config
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "score-testrecords"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncScorecard:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: ScorecardEnvironment = ScorecardEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.testset = AsyncTestsetClient(client_wrapper=self._client_wrapper)
        self.run = AsyncRunClient(client_wrapper=self._client_wrapper)
        self.testrecord = AsyncTestrecordClient(client_wrapper=self._client_wrapper)

    async def start_execution(
        self,
        *,
        scoring_model_name: str,
        run_id: int,
        testset_id: int,
        api_token: str,
        model_under_test: ModelParams,
        prompt_template: str,
        instant_scoring: typing.Optional[bool] = OMIT,
    ) -> typing.Any:
        """
        Starts a new model execution.

        Parameters:
            - scoring_model_name: str.

            - run_id: int.

            - testset_id: int.

            - api_token: str.

            - model_under_test: ModelParams.

            - prompt_template: str.

            - instant_scoring: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "scoring_model_name": scoring_model_name,
            "run_id": run_id,
            "testset_id": testset_id,
            "api_token": api_token,
            "model_under_test": model_under_test,
            "prompt_template": prompt_template,
        }
        if instant_scoring is not OMIT:
            _request["instant_scoring"] = instant_scoring
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "start-execution"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def score(
        self,
        *,
        scoring_model_name: str,
        run_id: int,
        testset_id: int,
        token: str,
        use_global_scoring_config: typing.Optional[bool] = OMIT,
    ) -> typing.Any:
        """
        Score existing testrecords.

        Parameters:
            - scoring_model_name: str.

            - run_id: int.

            - testset_id: int.

            - token: str.

            - use_global_scoring_config: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "scoring_model_name": scoring_model_name,
            "run_id": run_id,
            "testset_id": testset_id,
            "token": token,
        }
        if use_global_scoring_config is not OMIT:
            _request["use_global_scoring_config"] = use_global_scoring_config
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "score-testrecords"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: ScorecardEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
