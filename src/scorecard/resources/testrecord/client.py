# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestrecordClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        run_id: int,
        testcase_id: int,
        model_response: str,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        debug_output: typing.Optional[str] = OMIT,
        model_params: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        testset_id: typing.Optional[int] = OMIT,
        status: typing.Optional[str] = OMIT,
    ) -> typing.Any:
        """
        createa a new test record.

        Parameters:
            - run_id: int.

            - testcase_id: int.

            - model_response: str.

            - user_query: typing.Optional[str].

            - context: typing.Optional[str].

            - prompt: typing.Optional[str].

            - ideal: typing.Optional[str].

            - debug_output: typing.Optional[str].

            - model_params: typing.Optional[typing.Dict[str, typing.Any]].

            - testset_id: typing.Optional[int].

            - status: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {
            "run_id": run_id,
            "testcase_id": testcase_id,
            "model_response": model_response,
        }
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if debug_output is not OMIT:
            _request["debug_output"] = debug_output
        if model_params is not OMIT:
            _request["model_params"] = model_params
        if testset_id is not OMIT:
            _request["testset_id"] = testset_id
        if status is not OMIT:
            _request["status"] = status
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/testrecord"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestrecordClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        run_id: int,
        testcase_id: int,
        model_response: str,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        debug_output: typing.Optional[str] = OMIT,
        model_params: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        testset_id: typing.Optional[int] = OMIT,
        status: typing.Optional[str] = OMIT,
    ) -> typing.Any:
        """
        createa a new test record.

        Parameters:
            - run_id: int.

            - testcase_id: int.

            - model_response: str.

            - user_query: typing.Optional[str].

            - context: typing.Optional[str].

            - prompt: typing.Optional[str].

            - ideal: typing.Optional[str].

            - debug_output: typing.Optional[str].

            - model_params: typing.Optional[typing.Dict[str, typing.Any]].

            - testset_id: typing.Optional[int].

            - status: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {
            "run_id": run_id,
            "testcase_id": testcase_id,
            "model_response": model_response,
        }
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if debug_output is not OMIT:
            _request["debug_output"] = debug_output
        if model_params is not OMIT:
            _request["model_params"] = model_params
        if testset_id is not OMIT:
            _request["testset_id"] = testset_id
        if status is not OMIT:
            _request["status"] = status
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/testrecord"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
