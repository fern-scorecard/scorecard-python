# This file was auto-generated by Fern from our API Definition.

import datetime as dt
from email import message
import typing

from scorecard.core.api_error import ApiError

from ..core.datetime_utils import serialize_datetime
from .custom_schema_output import CustomSchemaOutput

from ..client import Scorecard
from ..types import PaginatedTestcaseResponse, TestCase

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Testset(pydantic.BaseModel):
    id: typing.Optional[int]
    created_at: typing.Optional[dt.datetime]
    name: typing.Optional[str]
    description: typing.Optional[str]
    using_retrieval: typing.Optional[bool]
    ingestion_method: typing.Optional[str]
    num_testcases: typing.Optional[int]
    published: typing.Optional[bool]
    updated_at: typing.Optional[dt.datetime]
    is_archived: typing.Optional[bool]
    project_id: typing.Optional[int]
    custom_schema: typing.Optional[CustomSchemaOutput]

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        object.__setattr__(self, '_client', Scorecard())

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    """
    Retrieve Testcases for this testset
    """
    def get_testcases(self) -> typing.List[TestCase]: 
        if self._client is None: 
            raise ApiError(message="Please set the client field before calling get_testcases")
        response = self._client.testset.get_testcases(testset_id=self.id)
        return response.results

    def _set_client(self, *, client: Scorecard) -> None:
        self._client = client

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
